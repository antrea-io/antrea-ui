// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package testing is a generated GoMock package.
package testing

import (
	context "context"
	reflect "reflect"

	traceflow "antrea.io/antrea-ui/pkg/handlers/traceflow"
	gomock "github.com/golang/mock/gomock"
)

// MockRequestsHandler is a mock of RequestsHandler interface.
type MockRequestsHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRequestsHandlerMockRecorder
}

// MockRequestsHandlerMockRecorder is the mock recorder for MockRequestsHandler.
type MockRequestsHandlerMockRecorder struct {
	mock *MockRequestsHandler
}

// NewMockRequestsHandler creates a new mock instance.
func NewMockRequestsHandler(ctrl *gomock.Controller) *MockRequestsHandler {
	mock := &MockRequestsHandler{ctrl: ctrl}
	mock.recorder = &MockRequestsHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestsHandler) EXPECT() *MockRequestsHandlerMockRecorder {
	return m.recorder
}

// CreateRequest mocks base method.
func (m *MockRequestsHandler) CreateRequest(ctx context.Context, request *traceflow.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", ctx, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRequest indicates an expected call of CreateRequest.
func (mr *MockRequestsHandlerMockRecorder) CreateRequest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockRequestsHandler)(nil).CreateRequest), ctx, request)
}

// DeleteRequest mocks base method.
func (m *MockRequestsHandler) DeleteRequest(ctx context.Context, requestID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRequest", ctx, requestID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRequest indicates an expected call of DeleteRequest.
func (mr *MockRequestsHandlerMockRecorder) DeleteRequest(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequest", reflect.TypeOf((*MockRequestsHandler)(nil).DeleteRequest), ctx, requestID)
}

// GetRequestResult mocks base method.
func (m *MockRequestsHandler) GetRequestResult(ctx context.Context, requestID string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestResult", ctx, requestID)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestResult indicates an expected call of GetRequestResult.
func (mr *MockRequestsHandlerMockRecorder) GetRequestResult(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestResult", reflect.TypeOf((*MockRequestsHandler)(nil).GetRequestResult), ctx, requestID)
}

// GetRequestStatus mocks base method.
func (m *MockRequestsHandler) GetRequestStatus(ctx context.Context, requestID string) (*traceflow.RequestStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestStatus", ctx, requestID)
	ret0, _ := ret[0].(*traceflow.RequestStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestStatus indicates an expected call of GetRequestStatus.
func (mr *MockRequestsHandlerMockRecorder) GetRequestStatus(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestStatus", reflect.TypeOf((*MockRequestsHandler)(nil).GetRequestStatus), ctx, requestID)
}
